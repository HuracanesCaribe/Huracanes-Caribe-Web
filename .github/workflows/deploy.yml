# -----------------------------------------------------------------------------
# GitHub Actions Workflow — Build & Deploy Huracanes Caribe
# -----------------------------------------------------------------------------
# This workflow does two things:
#   1) Builds the static Next.js site **and** generates hurricane‑outlook maps
#      via a Python script.
#   2) Publishes the resulting `/out` folder to the `gh-pages` branch so that
#      GitHub Pages (or a custom domain) can serve the latest build.
#
# Key points:
#   • Supports manual runs (`workflow_dispatch`), pull‑request previews, and
#     automatic deploys on every push to `main`.
#   • Uses Node 22 (matching your local v22.16.0) and Python 3.12.
#   • Caches both npm and pip dependencies for faster builds.
#   • Uploads the entire site as an artifact so the deploy job stays clean.
# -----------------------------------------------------------------------------

name: Build & Deploy

# ────────────────────────────────────────────────
# Triggers
# ────────────────────────────────────────────────
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel older runs of the same branch to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ────────────────────────────────────────────────
# Job 1 — Build
# ────────────────────────────────────────────────
jobs:
  build:
    name: Build website & generate maps
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      PYTHONUNBUFFERED: "1"

    steps:
      # 1️⃣ Check out the repository (incl. submodules, if you add any later)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2️⃣ Set up Node.js and restore npm cache
      - name: Setup Node 22.x & cache npm
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      # 3️⃣ Install JS dependencies exactly as in package-lock.json
      - name: Install Node dependencies
        run: npm ci

      # 4️⃣ Build & export the static Next.js site
      - name: Build Next.js site
        run: |
          npm run build   # compiles server & client bundles
          npm run export  # writes static HTML to /out (Next.js "export")

      # 5️⃣ Set up Python 3.12 and restore pip cache
      - name: Setup Python 3.12 & cache pip
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 6️⃣ Install Python requirements (data pipeline & map generation)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 7️⃣ Generate hurricane‑outlook maps (Atlantic + Eastern Pacific)
      - name: Generate GTWO maps
        run: |
          python scripts/generate_gtwo_maps.py --basin atlantic --output public/maps
          python scripts/generate_gtwo_maps.py --basin eastpac  --output public/maps

      # 8️⃣ Copy freshly‑generated maps into the exported site folder
      - name: Copy maps into site folder
        run: |
          mkdir -p out/maps
          cp -R public/maps/* out/maps/

      # 9️⃣ Upload the complete `out/` folder as an artifact for the deploy job
      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: out

# ────────────────────────────────────────────────
# Job 2 — Deploy (runs only on main after build)
# ────────────────────────────────────────────────
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == "refs/heads/main"

    steps:
      # 1️⃣ Download the build artifact produced in Job 1
      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: out

      # 2️⃣ Publish the static site to the `gh-pages` branch
      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: out
          publish_branch: gh-pages
          force_orphan: true
          # Uncomment the next line once your DNS points to GitHub Pages
          # cname: huracanescaribe.com

      # 3️⃣ Print the deployed URL in the workflow log for quick access
      - name: Echo deployment URL
        run: |
          echo "🌐 Site deployed to: https://tejedawx.github.io/huracanes-caribe/"
